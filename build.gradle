buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '1.7.2'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


////////////////////////////////////
// Get the latest commit ID
//

final commitId

if (hasProperty("grgit")) { // If there's a valid Git repository, get the latest commit ID
    commitId = "${grgit.head().abbreviatedId}"
} else { // Else fall back to NOGIT
    commitId = "NOGIT"
}


////////////////////////////////////
// Vars
//

version = "${mc_version}-${mod_version}-${commitId}"
group = "${package_group}"
archivesBaseName = "${mod_name}"


sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
    mappings channel: "official", version: "${mc_version}"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                soulus_ii {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                soulus_ii {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'soulus_ii', '--all', '--output', file('src/generated/resources/')

            mods {
                soulus_ii {
                    source sourceSets.main
                }
            }
        }
    }
    
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

}

processResources {
    
    inputs.property "mod_id", mod_id
    inputs.property "mod_version", mod_version
    inputs.property "mod_name", mod_name
    inputs.property "mc_version", mc_version
    inputs.property "mod_description", mod_description
    inputs.property "mod_author", mod_author
    inputs.property "mod_website", mod_website
    inputs.property "mod_github", mod_github
    inputs.property "forge_version", forge_version
    inputs.property "mod_license", mod_license
    
    // replace stuff in mods.toml
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'mod_id': "${mod_id}", 'mod_version': "${mod_version}", 'mod_name': "${mod_name}", 'mc_version': "${mc_version}", 'mod_description': "${mod_description}", 'mod_author': "${mod_author}", 'mod_website': "${mod_website}", 'mod_github': "${mod_github}", 'forge_version_major': "${forge_version.substring(0, 2)}", 'mod_license': "${mod_license}"
    }

    // copy everything else
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

task fixBin {
    project.delete(files("${projectDir}/bin/main/META-INF"))
    copy {
        from "${buildDir}/resources/main/META-INF"
        into "${projectDir}/bin/main/META-INF"
    }
}

jar {
    // Example for how to get properties into the manifest for reading by the runtime..
    manifest {
        attributes([
            "Specification-Title": "${mod_id}",
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${mod_id}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}